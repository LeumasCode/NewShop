[{"/home/damilare/Desktop/works/new-shop/frontend/src/index.js":"1","/home/damilare/Desktop/works/new-shop/frontend/src/App.js":"2","/home/damilare/Desktop/works/new-shop/frontend/src/components/Header.js":"3","/home/damilare/Desktop/works/new-shop/frontend/src/components/Footer.js":"4","/home/damilare/Desktop/works/new-shop/frontend/src/screens/HomeScreen.js":"5","/home/damilare/Desktop/works/new-shop/frontend/src/components/Product.js":"6","/home/damilare/Desktop/works/new-shop/frontend/src/components/Rating.js":"7","/home/damilare/Desktop/works/new-shop/frontend/src/screens/ProductScreen.js":"8","/home/damilare/Desktop/works/new-shop/frontend/src/store.js":"9","/home/damilare/Desktop/works/new-shop/frontend/src/reducers/productReducers.js":"10","/home/damilare/Desktop/works/new-shop/frontend/src/constants/productConstants.js":"11","/home/damilare/Desktop/works/new-shop/frontend/src/actions/productActions.js":"12","/home/damilare/Desktop/works/new-shop/frontend/src/components/Loader.js":"13","/home/damilare/Desktop/works/new-shop/frontend/src/components/Message.js":"14","/home/damilare/Desktop/works/new-shop/frontend/src/screens/CartScreen.js":"15","/home/damilare/Desktop/works/new-shop/frontend/src/reducers/cartReducers.js":"16","/home/damilare/Desktop/works/new-shop/frontend/src/constants/cartConstants.js":"17","/home/damilare/Desktop/works/new-shop/frontend/src/actions/cartActions.js":"18","/home/damilare/Desktop/works/new-shop/frontend/src/reducers/userReducers.js":"19","/home/damilare/Desktop/works/new-shop/frontend/src/constants/userConstants.js":"20","/home/damilare/Desktop/works/new-shop/frontend/src/screens/LoginScreen.js":"21","/home/damilare/Desktop/works/new-shop/frontend/src/components/FormContainer.js":"22","/home/damilare/Desktop/works/new-shop/frontend/src/actions/userActions.js":"23","/home/damilare/Desktop/works/new-shop/frontend/src/screens/RegisterScreen.js":"24","/home/damilare/Desktop/works/new-shop/frontend/src/screens/ProfileScreen.js":"25","/home/damilare/Desktop/works/new-shop/frontend/src/screens/ShippingScreen.js":"26","/home/damilare/Desktop/works/new-shop/frontend/src/components/CheckoutSteps.js":"27","/home/damilare/Desktop/works/new-shop/frontend/src/screens/paymentScreen.js":"28","/home/damilare/Desktop/works/new-shop/frontend/src/screens/PlaceorderScreen.js":"29","/home/damilare/Desktop/works/new-shop/frontend/src/reducers/orderReducers.js":"30","/home/damilare/Desktop/works/new-shop/frontend/src/constants/orderConstants.js":"31","/home/damilare/Desktop/works/new-shop/frontend/src/actions/orderActions.js":"32","/home/damilare/Desktop/works/new-shop/frontend/src/screens/OrderScreen.js":"33","/home/damilare/Desktop/works/new-shop/frontend/src/components/Flutterwave.js":"34","/home/damilare/Desktop/works/new-shop/frontend/src/screens/UserListScreen.js":"35"},{"size":317,"mtime":1611914139606,"results":"36","hashOfConfig":"37"},{"size":1731,"mtime":1612355894636,"results":"38","hashOfConfig":"37"},{"size":2394,"mtime":1612365996830,"results":"39","hashOfConfig":"37"},{"size":317,"mtime":1611766185487,"results":"40","hashOfConfig":"37"},{"size":1175,"mtime":1612126243242,"results":"41","hashOfConfig":"37"},{"size":858,"mtime":1611852879325,"results":"42","hashOfConfig":"37"},{"size":1735,"mtime":1611771821388,"results":"43","hashOfConfig":"37"},{"size":4288,"mtime":1612126207490,"results":"44","hashOfConfig":"37"},{"size":2066,"mtime":1612353644322,"results":"45","hashOfConfig":"37"},{"size":1009,"mtime":1611923403959,"results":"46","hashOfConfig":"37"},{"size":441,"mtime":1611921131754,"results":"47","hashOfConfig":"37"},{"size":1393,"mtime":1612126274978,"results":"48","hashOfConfig":"37"},{"size":391,"mtime":1611918929600,"results":"49","hashOfConfig":"37"},{"size":244,"mtime":1611919137540,"results":"50","hashOfConfig":"37"},{"size":3707,"mtime":1612126181067,"results":"51","hashOfConfig":"37"},{"size":1243,"mtime":1612176154882,"results":"52","hashOfConfig":"37"},{"size":241,"mtime":1612175884653,"results":"53","hashOfConfig":"37"},{"size":1367,"mtime":1612176021461,"results":"54","hashOfConfig":"37"},{"size":2549,"mtime":1612368930492,"results":"55","hashOfConfig":"37"},{"size":1116,"mtime":1612368869506,"results":"56","hashOfConfig":"37"},{"size":2161,"mtime":1612126226995,"results":"57","hashOfConfig":"37"},{"size":380,"mtime":1612096351651,"results":"58","hashOfConfig":"37"},{"size":4967,"mtime":1612368989282,"results":"59","hashOfConfig":"37"},{"size":3215,"mtime":1612103188462,"results":"60","hashOfConfig":"37"},{"size":5819,"mtime":1612276086312,"results":"61","hashOfConfig":"37"},{"size":2690,"mtime":1612275866260,"results":"62","hashOfConfig":"37"},{"size":1394,"mtime":1612174631119,"results":"63","hashOfConfig":"37"},{"size":1951,"mtime":1612275849175,"results":"64","hashOfConfig":"37"},{"size":5242,"mtime":1612275955100,"results":"65","hashOfConfig":"37"},{"size":1987,"mtime":1612276285090,"results":"66","hashOfConfig":"37"},{"size":892,"mtime":1612276232121,"results":"67","hashOfConfig":"37"},{"size":3528,"mtime":1612273217462,"results":"68","hashOfConfig":"37"},{"size":5579,"mtime":1612275995521,"results":"69","hashOfConfig":"37"},{"size":2322,"mtime":1612270957358,"results":"70","hashOfConfig":"37"},{"size":2711,"mtime":1612368600014,"results":"71","hashOfConfig":"37"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},"1gdrdkx",{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"123","usedDeprecatedRules":"74"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"140","usedDeprecatedRules":"74"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"143","usedDeprecatedRules":"74"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/home/damilare/Desktop/works/new-shop/frontend/src/index.js",[],["146","147"],"/home/damilare/Desktop/works/new-shop/frontend/src/App.js",[],"/home/damilare/Desktop/works/new-shop/frontend/src/components/Header.js",[],"/home/damilare/Desktop/works/new-shop/frontend/src/components/Footer.js",[],"/home/damilare/Desktop/works/new-shop/frontend/src/screens/HomeScreen.js",[],"/home/damilare/Desktop/works/new-shop/frontend/src/components/Product.js",[],"/home/damilare/Desktop/works/new-shop/frontend/src/components/Rating.js",[],"/home/damilare/Desktop/works/new-shop/frontend/src/screens/ProductScreen.js",[],"/home/damilare/Desktop/works/new-shop/frontend/src/store.js",[],"/home/damilare/Desktop/works/new-shop/frontend/src/reducers/productReducers.js",[],"/home/damilare/Desktop/works/new-shop/frontend/src/constants/productConstants.js",[],"/home/damilare/Desktop/works/new-shop/frontend/src/actions/productActions.js",[],"/home/damilare/Desktop/works/new-shop/frontend/src/components/Loader.js",[],"/home/damilare/Desktop/works/new-shop/frontend/src/components/Message.js",[],"/home/damilare/Desktop/works/new-shop/frontend/src/screens/CartScreen.js",[],"/home/damilare/Desktop/works/new-shop/frontend/src/reducers/cartReducers.js",[],"/home/damilare/Desktop/works/new-shop/frontend/src/constants/cartConstants.js",[],"/home/damilare/Desktop/works/new-shop/frontend/src/actions/cartActions.js",[],"/home/damilare/Desktop/works/new-shop/frontend/src/reducers/userReducers.js",[],"/home/damilare/Desktop/works/new-shop/frontend/src/constants/userConstants.js",[],"/home/damilare/Desktop/works/new-shop/frontend/src/screens/LoginScreen.js",[],"/home/damilare/Desktop/works/new-shop/frontend/src/components/FormContainer.js",[],"/home/damilare/Desktop/works/new-shop/frontend/src/actions/userActions.js",[],"/home/damilare/Desktop/works/new-shop/frontend/src/screens/RegisterScreen.js",[],"/home/damilare/Desktop/works/new-shop/frontend/src/screens/ProfileScreen.js",["148"],"import React, { useState, useEffect } from \"react\";\nimport { LinkContainer } from \"react-router-bootstrap\";\nimport { Form, Row, Col, Button, Table } from \"react-bootstrap\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport Message from \"../components/Message\";\nimport { getUserDetails, updateUserProfile } from \"../actions/userActions\";\nimport Loader from \"../components/Loader.js\";\nimport { listMyOrders } from \"../actions/orderActions\";\n\nconst ProfileScreen = ({ location, history }) => {\n  const [name, setName] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [confirmPassword, setConfirmPassword] = useState(\"\");\n  const [message, setMessage] = useState(null);\n\n  const dispatch = useDispatch();\n  const { loading, error, user } = useSelector((state) => state.userDetails);\n\n  // check if the user is Logged in\n\n  const { userInfo } = useSelector((state) => state.userLogin);\n\n  // get the user update profile from state\n  const { success } = useSelector((state) => state.userUpdateProfile);\n\n  // get the user order list from state\n  const { orders, loading: loadingOrders, error: errorOrders } = useSelector(\n    (state) => state.orderListMy\n  );\n\n  //check if the user is already loggedIn\n  useEffect(() => {\n    //check if the user is loggedIn\n    if (!userInfo) {\n      history.push(\"/login\"); // if not logged in, redirect to login\n    } else {\n      //check if the user details is NOT available, IF not, dispatch getUserDetails\n      if (!user.name) {\n        // dispatch getting the users details when page load\n        dispatch(getUserDetails(\"profile\"));\n\n        //dispatch getting the users Orders\n        dispatch(listMyOrders());\n      } else {\n        //if we have the userDetails, set the name, email in the text fields\n        setName(user.name);\n        setEmail(user.email);\n      }\n    }\n  }, [history, userInfo, dispatch, user]);\n\n  // submit handler\n  const onSubmitHandler = (e) => {\n    e.preventDefault();\n\n    //check if password match\n    if (password !== confirmPassword) {\n      setMessage(\"Password do not match\");\n    } else {\n      // DISPATCH UPDATE PROFILE\n      dispatch(updateUserProfile({ id: user._id, name, email, password }));\n    }\n  };\n\n  //   console.log(user.name)\n  return (\n    <Row>\n      <Col md={3}>\n        {\" \"}\n        <h2>User Profile</h2>\n        {message && <Message variant=\"danger\">{message}</Message>}\n        {error && <Message variant=\"danger\">{error}</Message>}\n        {success && <Message variant=\"success\">Profile Updated</Message>}\n        {loading && <Loader />}\n        <Form onSubmit={onSubmitHandler}>\n          <Form.Group controlId=\"name\">\n            <Form.Label>Name</Form.Label>\n            <Form.Control\n              type=\"text\"\n              placeholder=\"Enter Name\"\n              value={name}\n              onChange={(e) => setName(e.target.value)}\n            ></Form.Control>\n          </Form.Group>\n\n          <Form.Group controlId=\"email\">\n            <Form.Label>Email Address</Form.Label>\n            <Form.Control\n              type=\"email\"\n              placeholder=\"Enter Email\"\n              value={email}\n              onChange={(e) => setEmail(e.target.value)}\n            ></Form.Control>\n          </Form.Group>\n\n          <Form.Group controlId=\"password\">\n            <Form.Label>Password</Form.Label>\n            <Form.Control\n              type=\"password\"\n              placeholder=\"Enter Password\"\n              value={password}\n              onChange={(e) => setPassword(e.target.value)}\n            ></Form.Control>\n          </Form.Group>\n\n          <Form.Group controlId=\"confirmPassword\">\n            <Form.Label>Confirm Password</Form.Label>\n            <Form.Control\n              type=\"password\"\n              placeholder=\"Confirm Password\"\n              value={confirmPassword}\n              onChange={(e) => setConfirmPassword(e.target.value)}\n            ></Form.Control>\n          </Form.Group>\n\n          <Button type=\"submit\" variant=\"primary\">\n            Update\n          </Button>\n        </Form>\n      </Col>\n      {/* Display my orders */}\n      <Col md={9}>\n        <h2>My Order</h2>\n        {loadingOrders ? (\n          <Loader />\n        ) : error ? (\n          <Message variant=\"danger\">{error}</Message>\n        ) : (\n          <Table striped bordered responsive hover className=\"table-sm\">\n            <thead>\n              <tr>\n                <th>ID</th>\n                <th>DATE</th>\n                <th>TOTAL</th>\n                <th>PAID</th>\n                <th>DELIVERED</th>\n                <th></th>\n              </tr>\n            </thead>\n\n            <tbody>\n              {orders.map((order) => (\n                <tr key={order._id}>\n                  <td>{order._id}</td>\n                  <td>{order.createdAt.substring(0, 10)}</td>\n                  <td>{order.totalPrice}</td>\n                  <td>\n                    {order.isPaid ? (\n                      order.paidAt.substring(0, 10)\n                    ) : (\n                      <i className=\"fas fa-times\" style={{ color: \"red\" }} />\n                    )}\n                  </td>\n                  <td>\n                    {order.isDelivered ? (\n                      order.deliveredAt.substring(0, 10)\n                    ) : (\n                      <i className=\"fas fa-times\" style={{ color: \"red\" }} />\n                    )}\n                  </td>\n                  <td>\n                    <LinkContainer to={`/order/${order._id}`}>\n                      <Button className='btn-sm' variant=\"light\">Details</Button>\n                    </LinkContainer>\n                  </td>\n                </tr>\n              ))}\n            </tbody>\n          </Table>\n        )}\n      </Col>\n    </Row>\n  );\n};\n\nexport default ProfileScreen;\n","/home/damilare/Desktop/works/new-shop/frontend/src/screens/ShippingScreen.js",[],"/home/damilare/Desktop/works/new-shop/frontend/src/components/CheckoutSteps.js",[],"/home/damilare/Desktop/works/new-shop/frontend/src/screens/paymentScreen.js",[],"/home/damilare/Desktop/works/new-shop/frontend/src/screens/PlaceorderScreen.js",[],"/home/damilare/Desktop/works/new-shop/frontend/src/reducers/orderReducers.js",[],"/home/damilare/Desktop/works/new-shop/frontend/src/constants/orderConstants.js",[],"/home/damilare/Desktop/works/new-shop/frontend/src/actions/orderActions.js",[],"/home/damilare/Desktop/works/new-shop/frontend/src/screens/OrderScreen.js",["149"],"import React, { useEffect } from \"react\";\nimport { ListGroup, Image, Card, Row, Col} from \"react-bootstrap\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport Message from \"../components/Message\";\nimport Loader from \"../components/Loader.js\";\nimport { Link } from \"react-router-dom\";\nimport { getOrderDetails } from \"../actions/orderActions.js\";\nimport Flutterwave from \"../components/Flutterwave\";\n\nconst OrderScreen = ({ match }) => {\n  const orderId = match.params.id;\n  const dispatch = useDispatch();\n\n  // get the order details from state\n  const { order, loading, error } = useSelector((state) => state.orderDetails);\n\n  // get the order details from state\n  const {\n    success: successPay,\n    loading: loadingPay,\n    error: errorPay,\n  } = useSelector((state) => state.orderPay);\n\n  // on-load of the screen fetch the order\n  useEffect(() => {\n    dispatch(getOrderDetails(orderId));\n  }, [orderId, dispatch]);\n\n  // Calculate Prices\n  if (!loading) {\n    const addDecimals = (num) => {\n      return (Math.round(num * 100) / 100).toFixed(2);\n    };\n\n    order.itemsPrice = addDecimals(\n      order.orderItems.reduce((acc, item) => acc + item.price * item.qty, 0)\n    );\n  }\n\n  return loading ? (\n    <Loader />\n  ) : error ? (\n    <Message variant=\"danger\">{error}</Message>\n  ) : (\n    <>\n      <h1>Order {order._id}</h1>\n\n      <Row>\n        <Col md={8}>\n          <ListGroup variant=\"flush\">\n            {/* display the shipping address */}\n            <ListGroup.Item>\n              <h2>Shipping</h2>\n              <p>\n                {\" \"}\n                <strong>Name: </strong>\n                {order.user.name}\n              </p>\n              <p>\n                <strong>Email: </strong>\n                <a href={`mailto: ${order.user.email}`}> {order.user.email}</a>\n              </p>\n              <p>\n                <strong>Address: </strong>\n                {order.shippingAddress.address}, {order.shippingAddress.city},{\" \"}\n                {order.shippingAddress.postalCode},{\" \"}\n                {order.shippingAddress.country},\n              </p>\n\n              {order.isDelivered ? (\n                <Message variant=\"success\">Paid on {order.deliveredAt}</Message>\n              ) : (\n                <Message variant=\"danger\">Not Delivered</Message>\n              )}\n            </ListGroup.Item>\n\n            {/* display the payment method */}\n            <ListGroup.Item>\n              <h2>Payment Method </h2>\n              <p>\n                <strong>Method: </strong>\n                {order.paymentMethod}\n              </p>\n              {order.isPaid ? (\n                <Message variant=\"success\">Paid on {order.paidAt}</Message>\n              ) : (\n                <Message variant=\"danger\">Not Paid</Message>\n              )}\n            </ListGroup.Item>\n\n            {/* display orders */}\n            <ListGroup.Item>\n              <h2>Order Items</h2>\n              {order.orderItems.length === 0 ? (\n                <Message>Order is empty</Message>\n              ) : (\n                <ListGroup variant=\"flush\">\n                  {order.orderItems.map((item, index) => (\n                    <ListGroup.Item key={index}>\n                      <Row>\n                        <Col md={1}>\n                          <Image\n                            src={item.image}\n                            alt={item.name}\n                            fluid\n                            rounded\n                          />\n                        </Col>\n                        <Col>\n                          <Link to={`/product/item.product`}>{item.name}</Link>\n                        </Col>\n                        <Col md={4}>\n                          {item.qty} x ₦{item.price} = ₦{item.qty * item.price}\n                        </Col>\n                      </Row>\n                    </ListGroup.Item>\n                  ))}\n                </ListGroup>\n              )}\n            </ListGroup.Item>\n          </ListGroup>\n        </Col>\n\n        <Col md={4}>\n          <Card>\n            <ListGroup>\n              <ListGroup.Item>\n                <h2>Order Summary</h2>\n              </ListGroup.Item>\n\n              <ListGroup.Item>\n                <Row>\n                  <Col>Items</Col>\n                  <Col>₦{order.itemsPrice}</Col>\n                </Row>\n              </ListGroup.Item>\n\n              <ListGroup.Item>\n                <Row>\n                  <Col>Shipping</Col>\n                  <Col>₦{order.shippingPrice}</Col>\n                </Row>\n              </ListGroup.Item>\n\n              <ListGroup.Item>\n                <Row>\n                  <Col>Tax</Col>\n                  <Col>₦{order.taxPrice}</Col>\n                </Row>\n              </ListGroup.Item>\n\n              <ListGroup.Item>\n                <Row>\n                  <Col>Total</Col>\n                  <Col>₦{order.totalPrice}</Col>\n                </Row>\n              </ListGroup.Item>\n\n              {!order.isPaid && (\n                <ListGroup.Item>\n                  {loadingPay ? (\n                    <Loader />\n                  ) : (\n                    <Flutterwave\n                      successPay={successPay}\n                      userName={order.user.name}\n                      userEmail={order.user.email}\n                      amount={order.totalPrice}\n                      orderId = {orderId}\n                    />\n                  )}\n                </ListGroup.Item>\n              )}\n            </ListGroup>\n          </Card>\n        </Col>\n      </Row>\n    </>\n  );\n};\n\nexport default OrderScreen;\n","/home/damilare/Desktop/works/new-shop/frontend/src/components/Flutterwave.js",["150"],"import React, { useEffect, useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { useFlutterwave, closePaymentModal } from \"flutterwave-react-v3\";\nimport axios from \"axios\";\nimport { getOrderDetails, payOrder } from \"../actions/orderActions\";\nimport { ORDER_PAY_RESET } from \"../constants/orderConstants\";\n\nexport default function App({ orderId, userName, userEmail, amount }) {\n  const [flutterId, setFlutterId] = useState(\"\");\n\n  const dispatch = useDispatch();\n  useEffect(() => {\n    const getPublicId = async () => {\n      const { data: publicId } = await axios.get(\"/api/config/flutterwave\");\n\n      setFlutterId(publicId);\n    };\n\n    getPublicId();\n  }, []);\n\n\n  const config = {\n    public_key: flutterId,\n    tx_ref: Date.now(),\n    amount,\n    currency: \"NGN\",\n    payment_options: \"card,mobilemoney,ussd\",\n    customer: {\n      email: userEmail,\n      phonenumber: \"\",\n      name: userName,\n    },\n    customizations: {\n      title: \"New Shop\",\n      description: \"Payment for items in cart\",\n      logo:\n        \"https://st2.depositphotos.com/4403291/7418/v/450/depositphotos_74189661-stock-illustration-online-shop-log.jpg\",\n    },\n  };\n\n  const handleFlutterPayment = useFlutterwave(config);\n\n  return (\n    <div className=\"App\">\n      <button\n        style={{\n          padding: \"0.5em 3em\",\n          border: \"0.16em solid #FFFFFF\",\n          margin: \"0 0.3em 0.3em 0\",\n          backgroundColor: \"#000\",\n          boxSizing: \"border-box\",\n          textTransform: \"uppercase\",\n          fontWeight: 400,\n          color: \"#FFFFFF\",\n          textAlign: \"center\",\n          transition: \"all 0.15s\",\n        }}\n        onClick={() => {\n          handleFlutterPayment({\n            callback: (response) => {\n              //dispatch the payment result\n              console.log(response);\n              dispatch(payOrder(orderId, response));\n             \n              //dispatch refresh payOrder\n              dispatch({ type: ORDER_PAY_RESET });\n\n              closePaymentModal(); // this will close the modal programmatically\n               if (response.status === \"successful\") {\n                 window.location.reload();\n               }\n            },\n            onClose: () => {},\n          });\n        }}\n      >\n        Payment with Card\n      </button>\n    </div>\n  );\n}\n","/home/damilare/Desktop/works/new-shop/frontend/src/screens/UserListScreen.js",["151","152","153"],{"ruleId":"154","replacedBy":"155"},{"ruleId":"156","replacedBy":"157"},{"ruleId":"158","severity":1,"message":"159","line":28,"column":50,"nodeType":"160","messageId":"161","endLine":28,"endColumn":61},{"ruleId":"158","severity":1,"message":"162","line":21,"column":12,"nodeType":"160","messageId":"161","endLine":21,"endColumn":20},{"ruleId":"158","severity":1,"message":"163","line":5,"column":10,"nodeType":"160","messageId":"161","endLine":5,"endColumn":25},{"ruleId":"158","severity":1,"message":"164","line":1,"column":17,"nodeType":"160","messageId":"161","endLine":1,"endColumn":25},{"ruleId":"158","severity":1,"message":"165","line":2,"column":10,"nodeType":"160","messageId":"161","endLine":2,"endColumn":14},{"ruleId":"166","severity":1,"message":"167","line":29,"column":6,"nodeType":"168","endLine":29,"endColumn":25,"suggestions":"169"},"no-native-reassign",["170"],"no-negated-in-lhs",["171"],"no-unused-vars","'errorOrders' is assigned a value but never used.","Identifier","unusedVar","'errorPay' is assigned a value but never used.","'getOrderDetails' is defined but never used.","'useState' is defined but never used.","'Link' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'userInfo'. Either include it or remove the dependency array.","ArrayExpression",["172"],"no-global-assign","no-unsafe-negation",{"desc":"173","fix":"174"},"Update the dependencies array to be: [dispatch, history, userInfo]",{"range":"175","text":"176"},[944,963],"[dispatch, history, userInfo]"]