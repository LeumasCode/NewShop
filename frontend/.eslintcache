[{"/home/damilare/Desktop/works/new-shop/frontend/src/index.js":"1","/home/damilare/Desktop/works/new-shop/frontend/src/App.js":"2","/home/damilare/Desktop/works/new-shop/frontend/src/components/Header.js":"3","/home/damilare/Desktop/works/new-shop/frontend/src/components/Footer.js":"4","/home/damilare/Desktop/works/new-shop/frontend/src/screens/HomeScreen.js":"5","/home/damilare/Desktop/works/new-shop/frontend/src/components/Product.js":"6","/home/damilare/Desktop/works/new-shop/frontend/src/components/Rating.js":"7","/home/damilare/Desktop/works/new-shop/frontend/src/screens/ProductScreen.js":"8","/home/damilare/Desktop/works/new-shop/frontend/src/store.js":"9","/home/damilare/Desktop/works/new-shop/frontend/src/reducers/productReducers.js":"10","/home/damilare/Desktop/works/new-shop/frontend/src/constants/productConstants.js":"11","/home/damilare/Desktop/works/new-shop/frontend/src/actions/productActions.js":"12","/home/damilare/Desktop/works/new-shop/frontend/src/components/Loader.js":"13","/home/damilare/Desktop/works/new-shop/frontend/src/components/Message.js":"14","/home/damilare/Desktop/works/new-shop/frontend/src/screens/CartScreen.js":"15","/home/damilare/Desktop/works/new-shop/frontend/src/reducers/cartReducers.js":"16","/home/damilare/Desktop/works/new-shop/frontend/src/constants/cartConstants.js":"17","/home/damilare/Desktop/works/new-shop/frontend/src/actions/cartActions.js":"18","/home/damilare/Desktop/works/new-shop/frontend/src/reducers/userReducers.js":"19","/home/damilare/Desktop/works/new-shop/frontend/src/constants/userConstants.js":"20","/home/damilare/Desktop/works/new-shop/frontend/src/screens/LoginScreen.js":"21","/home/damilare/Desktop/works/new-shop/frontend/src/components/FormContainer.js":"22","/home/damilare/Desktop/works/new-shop/frontend/src/actions/userActions.js":"23","/home/damilare/Desktop/works/new-shop/frontend/src/screens/RegisterScreen.js":"24","/home/damilare/Desktop/works/new-shop/frontend/src/screens/ProfileScreen.js":"25","/home/damilare/Desktop/works/new-shop/frontend/src/screens/ShippingScreen.js":"26","/home/damilare/Desktop/works/new-shop/frontend/src/components/CheckoutSteps.js":"27","/home/damilare/Desktop/works/new-shop/frontend/src/screens/paymentScreen.js":"28","/home/damilare/Desktop/works/new-shop/frontend/src/screens/PlaceorderScreen.js":"29","/home/damilare/Desktop/works/new-shop/frontend/src/reducers/orderReducers.js":"30","/home/damilare/Desktop/works/new-shop/frontend/src/constants/orderConstants.js":"31","/home/damilare/Desktop/works/new-shop/frontend/src/actions/orderActions.js":"32","/home/damilare/Desktop/works/new-shop/frontend/src/screens/OrderScreen.js":"33","/home/damilare/Desktop/works/new-shop/frontend/src/components/Flutterwave.js":"34","/home/damilare/Desktop/works/new-shop/frontend/src/screens/UserListScreen.js":"35","/home/damilare/Desktop/works/new-shop/frontend/src/screens/UserEditScreen.js":"36","/home/damilare/Desktop/works/new-shop/frontend/src/screens/ProductListScreen.js":"37","/home/damilare/Desktop/works/new-shop/frontend/src/screens/ProductEditScreen.js":"38","/home/damilare/Desktop/works/new-shop/frontend/src/screens/OrderListScreen.js":"39","/home/damilare/Desktop/works/new-shop/frontend/src/screens/SearchBox.js":"40"},{"size":317,"mtime":1611914139606,"results":"41","hashOfConfig":"42"},{"size":2337,"mtime":1612533503202,"results":"43","hashOfConfig":"42"},{"size":2586,"mtime":1612533758695,"results":"44","hashOfConfig":"42"},{"size":317,"mtime":1611766185487,"results":"45","hashOfConfig":"42"},{"size":1241,"mtime":1612534609173,"results":"46","hashOfConfig":"42"},{"size":858,"mtime":1611852879325,"results":"47","hashOfConfig":"42"},{"size":1735,"mtime":1611771821388,"results":"48","hashOfConfig":"42"},{"size":7806,"mtime":1612531105928,"results":"49","hashOfConfig":"42"},{"size":2556,"mtime":1612518712922,"results":"50","hashOfConfig":"42"},{"size":3232,"mtime":1612536261823,"results":"51","hashOfConfig":"42"},{"size":1552,"mtime":1612518549581,"results":"52","hashOfConfig":"42"},{"size":4924,"mtime":1612536139072,"results":"53","hashOfConfig":"42"},{"size":391,"mtime":1611918929600,"results":"54","hashOfConfig":"42"},{"size":244,"mtime":1611919137540,"results":"55","hashOfConfig":"42"},{"size":3707,"mtime":1612126181067,"results":"56","hashOfConfig":"42"},{"size":1243,"mtime":1612176154882,"results":"57","hashOfConfig":"42"},{"size":241,"mtime":1612175884653,"results":"58","hashOfConfig":"42"},{"size":1367,"mtime":1612176021461,"results":"59","hashOfConfig":"42"},{"size":3468,"mtime":1612381963061,"results":"60","hashOfConfig":"42"},{"size":1512,"mtime":1612381814441,"results":"61","hashOfConfig":"42"},{"size":2161,"mtime":1612126226995,"results":"62","hashOfConfig":"42"},{"size":380,"mtime":1612096351651,"results":"63","hashOfConfig":"42"},{"size":6676,"mtime":1612382237629,"results":"64","hashOfConfig":"42"},{"size":3215,"mtime":1612103188462,"results":"65","hashOfConfig":"42"},{"size":5819,"mtime":1612276086312,"results":"66","hashOfConfig":"42"},{"size":2690,"mtime":1612275866260,"results":"67","hashOfConfig":"42"},{"size":1394,"mtime":1612174631119,"results":"68","hashOfConfig":"42"},{"size":1951,"mtime":1612275849175,"results":"69","hashOfConfig":"42"},{"size":5231,"mtime":1612399841395,"results":"70","hashOfConfig":"42"},{"size":2935,"mtime":1612508042505,"results":"71","hashOfConfig":"42"},{"size":1335,"mtime":1612507971949,"results":"72","hashOfConfig":"42"},{"size":5134,"mtime":1612510132070,"results":"73","hashOfConfig":"42"},{"size":6506,"mtime":1612510461518,"results":"74","hashOfConfig":"42"},{"size":2285,"mtime":1612400195450,"results":"75","hashOfConfig":"42"},{"size":2928,"mtime":1612376133817,"results":"76","hashOfConfig":"42"},{"size":3159,"mtime":1612382897049,"results":"77","hashOfConfig":"42"},{"size":4024,"mtime":1612444446405,"results":"78","hashOfConfig":"42"},{"size":6049,"mtime":1612464372457,"results":"79","hashOfConfig":"42"},{"size":2743,"mtime":1612468477428,"results":"80","hashOfConfig":"42"},{"size":743,"mtime":1612533360531,"results":"81","hashOfConfig":"42"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},"1gdrdkx",{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"133","usedDeprecatedRules":"84"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"142","usedDeprecatedRules":"84"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"145","usedDeprecatedRules":"84"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"152","usedDeprecatedRules":"84"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"155","usedDeprecatedRules":"84"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"158","usedDeprecatedRules":"84"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"163","usedDeprecatedRules":"84"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"166","usedDeprecatedRules":"84"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"169","usedDeprecatedRules":"84"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/damilare/Desktop/works/new-shop/frontend/src/index.js",[],["172","173"],"/home/damilare/Desktop/works/new-shop/frontend/src/App.js",[],"/home/damilare/Desktop/works/new-shop/frontend/src/components/Header.js",[],"/home/damilare/Desktop/works/new-shop/frontend/src/components/Footer.js",[],"/home/damilare/Desktop/works/new-shop/frontend/src/screens/HomeScreen.js",[],"/home/damilare/Desktop/works/new-shop/frontend/src/components/Product.js",[],"/home/damilare/Desktop/works/new-shop/frontend/src/components/Rating.js",[],"/home/damilare/Desktop/works/new-shop/frontend/src/screens/ProductScreen.js",["174"],"/home/damilare/Desktop/works/new-shop/frontend/src/store.js",[],"/home/damilare/Desktop/works/new-shop/frontend/src/reducers/productReducers.js",[],"/home/damilare/Desktop/works/new-shop/frontend/src/constants/productConstants.js",[],"/home/damilare/Desktop/works/new-shop/frontend/src/actions/productActions.js",[],"/home/damilare/Desktop/works/new-shop/frontend/src/components/Loader.js",[],"/home/damilare/Desktop/works/new-shop/frontend/src/components/Message.js",[],"/home/damilare/Desktop/works/new-shop/frontend/src/screens/CartScreen.js",[],"/home/damilare/Desktop/works/new-shop/frontend/src/reducers/cartReducers.js",[],"/home/damilare/Desktop/works/new-shop/frontend/src/constants/cartConstants.js",[],"/home/damilare/Desktop/works/new-shop/frontend/src/actions/cartActions.js",[],"/home/damilare/Desktop/works/new-shop/frontend/src/reducers/userReducers.js",[],"/home/damilare/Desktop/works/new-shop/frontend/src/constants/userConstants.js",[],"/home/damilare/Desktop/works/new-shop/frontend/src/screens/LoginScreen.js",[],"/home/damilare/Desktop/works/new-shop/frontend/src/components/FormContainer.js",[],"/home/damilare/Desktop/works/new-shop/frontend/src/actions/userActions.js",[],"/home/damilare/Desktop/works/new-shop/frontend/src/screens/RegisterScreen.js",[],"/home/damilare/Desktop/works/new-shop/frontend/src/screens/ProfileScreen.js",["175"],"import React, { useState, useEffect } from \"react\";\nimport { LinkContainer } from \"react-router-bootstrap\";\nimport { Form, Row, Col, Button, Table } from \"react-bootstrap\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport Message from \"../components/Message\";\nimport { getUserDetails, updateUserProfile } from \"../actions/userActions\";\nimport Loader from \"../components/Loader.js\";\nimport { listMyOrders } from \"../actions/orderActions\";\n\nconst ProfileScreen = ({ location, history }) => {\n  const [name, setName] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [confirmPassword, setConfirmPassword] = useState(\"\");\n  const [message, setMessage] = useState(null);\n\n  const dispatch = useDispatch();\n  const { loading, error, user } = useSelector((state) => state.userDetails);\n\n  // check if the user is Logged in\n\n  const { userInfo } = useSelector((state) => state.userLogin);\n\n  // get the user update profile from state\n  const { success } = useSelector((state) => state.userUpdateProfile);\n\n  // get the user order list from state\n  const { orders, loading: loadingOrders, error: errorOrders } = useSelector(\n    (state) => state.orderListMy\n  );\n\n  //check if the user is already loggedIn\n  useEffect(() => {\n    //check if the user is loggedIn\n    if (!userInfo) {\n      history.push(\"/login\"); // if not logged in, redirect to login\n    } else {\n      //check if the user details is NOT available, IF not, dispatch getUserDetails\n      if (!user.name) {\n        // dispatch getting the users details when page load\n        dispatch(getUserDetails(\"profile\"));\n\n        //dispatch getting the users Orders\n        dispatch(listMyOrders());\n      } else {\n        //if we have the userDetails, set the name, email in the text fields\n        setName(user.name);\n        setEmail(user.email);\n      }\n    }\n  }, [history, userInfo, dispatch, user]);\n\n  // submit handler\n  const onSubmitHandler = (e) => {\n    e.preventDefault();\n\n    //check if password match\n    if (password !== confirmPassword) {\n      setMessage(\"Password do not match\");\n    } else {\n      // DISPATCH UPDATE PROFILE\n      dispatch(updateUserProfile({ id: user._id, name, email, password }));\n    }\n  };\n\n  //   console.log(user.name)\n  return (\n    <Row>\n      <Col md={3}>\n        {\" \"}\n        <h2>User Profile</h2>\n        {message && <Message variant=\"danger\">{message}</Message>}\n        {error && <Message variant=\"danger\">{error}</Message>}\n        {success && <Message variant=\"success\">Profile Updated</Message>}\n        {loading && <Loader />}\n        <Form onSubmit={onSubmitHandler}>\n          <Form.Group controlId=\"name\">\n            <Form.Label>Name</Form.Label>\n            <Form.Control\n              type=\"text\"\n              placeholder=\"Enter Name\"\n              value={name}\n              onChange={(e) => setName(e.target.value)}\n            ></Form.Control>\n          </Form.Group>\n\n          <Form.Group controlId=\"email\">\n            <Form.Label>Email Address</Form.Label>\n            <Form.Control\n              type=\"email\"\n              placeholder=\"Enter Email\"\n              value={email}\n              onChange={(e) => setEmail(e.target.value)}\n            ></Form.Control>\n          </Form.Group>\n\n          <Form.Group controlId=\"password\">\n            <Form.Label>Password</Form.Label>\n            <Form.Control\n              type=\"password\"\n              placeholder=\"Enter Password\"\n              value={password}\n              onChange={(e) => setPassword(e.target.value)}\n            ></Form.Control>\n          </Form.Group>\n\n          <Form.Group controlId=\"confirmPassword\">\n            <Form.Label>Confirm Password</Form.Label>\n            <Form.Control\n              type=\"password\"\n              placeholder=\"Confirm Password\"\n              value={confirmPassword}\n              onChange={(e) => setConfirmPassword(e.target.value)}\n            ></Form.Control>\n          </Form.Group>\n\n          <Button type=\"submit\" variant=\"primary\">\n            Update\n          </Button>\n        </Form>\n      </Col>\n      {/* Display my orders */}\n      <Col md={9}>\n        <h2>My Order</h2>\n        {loadingOrders ? (\n          <Loader />\n        ) : error ? (\n          <Message variant=\"danger\">{error}</Message>\n        ) : (\n          <Table striped bordered responsive hover className=\"table-sm\">\n            <thead>\n              <tr>\n                <th>ID</th>\n                <th>DATE</th>\n                <th>TOTAL</th>\n                <th>PAID</th>\n                <th>DELIVERED</th>\n                <th></th>\n              </tr>\n            </thead>\n\n            <tbody>\n              {orders.map((order) => (\n                <tr key={order._id}>\n                  <td>{order._id}</td>\n                  <td>{order.createdAt.substring(0, 10)}</td>\n                  <td>{order.totalPrice}</td>\n                  <td>\n                    {order.isPaid ? (\n                      order.paidAt.substring(0, 10)\n                    ) : (\n                      <i className=\"fas fa-times\" style={{ color: \"red\" }} />\n                    )}\n                  </td>\n                  <td>\n                    {order.isDelivered ? (\n                      order.deliveredAt.substring(0, 10)\n                    ) : (\n                      <i className=\"fas fa-times\" style={{ color: \"red\" }} />\n                    )}\n                  </td>\n                  <td>\n                    <LinkContainer to={`/order/${order._id}`}>\n                      <Button className='btn-sm' variant=\"light\">Details</Button>\n                    </LinkContainer>\n                  </td>\n                </tr>\n              ))}\n            </tbody>\n          </Table>\n        )}\n      </Col>\n    </Row>\n  );\n};\n\nexport default ProfileScreen;\n","/home/damilare/Desktop/works/new-shop/frontend/src/screens/ShippingScreen.js",[],"/home/damilare/Desktop/works/new-shop/frontend/src/components/CheckoutSteps.js",[],"/home/damilare/Desktop/works/new-shop/frontend/src/screens/paymentScreen.js",[],"/home/damilare/Desktop/works/new-shop/frontend/src/screens/PlaceorderScreen.js",["176"],"import React, { useEffect } from \"react\";\nimport { ListGroup, Image, Card, Row, Col, Button } from \"react-bootstrap\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport CheckoutSteps from \"../components/CheckoutSteps.js\";\nimport Message from \"../components/Message\";\nimport {Link} from 'react-router-dom'\nimport { createOrder } from \"../actions/orderActions.js\";\n\nconst PlaceorderScreen = ({ history }) => {\n  const cart = useSelector((state) => state.cart);\n  const dispatch = useDispatch();\n\n  // get the order details from state\n  const { order, success, error } = useSelector((state) => state.orderCreate);\n\n  // Calculate Prices\n\n  const addDecimals = (num) => {\n    return (Math.round(num * 100) / 100).toFixed(2);\n  };\n\n  cart.itemsPrice = addDecimals(\n    cart.cartItems.reduce((acc, item) => acc + item.price * item.qty, 0)\n  );\n\n  // calculate shipping\n  cart.shippingPrice = addDecimals(cart.itemsPrice < 2000 ? 0 : 1000);\n\n  // calculate taxPrice Nigeria(.75)\n  cart.taxPrice = addDecimals(Number((0.07 * cart.itemsPrice).toFixed(2)));\n\n  // calculate the total Price\n  cart.totalPrice = (\n    Number(cart.itemsPrice) +\n    Number(cart.shippingPrice) +\n    Number(cart.taxPrice)\n  ).toFixed(2);\n\n  const placeOrderHandler = () => {\n    // DISPATCH CREATE ORDER ACTION\n    dispatch(\n      createOrder({\n        orderItems: cart.cartItems,\n        shippingAddress: cart.shippingAddress,\n        paymentMethod: cart.paymentMethod,\n        itemsPrice: cart.itemsPrice,\n        shippingPrice: cart.shippingPrice,\n        taxPrice: cart.taxPrice,\n        totalPrice: cart.totalPrice,\n      })\n    );\n  };\n\n  // if the order is successful\n  useEffect(() => {\n    if (success) {\n      history.push(`/order/${order._id}`);\n    }\n  }, [history, success]);\n\n  return (\n    <>\n      <CheckoutSteps step1 step2 step3 step4 />\n\n      <Row>\n        <Col md={8}>\n          <ListGroup variant=\"flush\">\n            {/* display the shipping address */}\n            <ListGroup.Item>\n              <h2>Shipping</h2>\n              <p>\n                {\" \"}\n                <strong>Address: </strong>\n                {cart.shippingAddress.address}, {cart.shippingAddress.city},{\" \"}\n                {cart.shippingAddress.postalCode},{\" \"}\n                {cart.shippingAddress.country},\n              </p>\n            </ListGroup.Item>\n\n            {/* display the payment method */}\n            <ListGroup.Item>\n              <h2>Payment Method </h2>\n              <strong>Method: </strong>\n              {cart.paymentMethod}\n            </ListGroup.Item>\n\n            {/* display orders */}\n            <ListGroup.Item>\n              <h2>Order Items</h2>\n              {cart.cartItems.length === 0 ? (\n                <Message>Your cart is empty</Message>\n              ) : (\n                <ListGroup variant=\"flush\">\n                  {cart.cartItems.map((item, index) => (\n                    <ListGroup.Item key={index}>\n                      <Row>\n                        <Col md={1}>\n                          <Image\n                            src={item.image}\n                            alt={item.name}\n                            fluid\n                            rounded\n                          />\n                        </Col>\n                        <Col>\n                          <Link to={`/product/item.product`}>{item.name}</Link>\n                        </Col>\n                        <Col md={4}>\n                          {item.qty} x ₦{item.price} = ₦{item.qty * item.price}\n                        </Col>\n                      </Row>\n                    </ListGroup.Item>\n                  ))}\n                </ListGroup>\n              )}\n            </ListGroup.Item>\n          </ListGroup>\n        </Col>\n\n        <Col md={4}>\n          <Card>\n            <ListGroup>\n              <ListGroup.Item>\n                <h2>Order Summary</h2>\n              </ListGroup.Item>\n\n              <ListGroup.Item>\n                <Row>\n                  <Col>Items</Col>\n                  <Col>₦{cart.itemsPrice}</Col>\n                </Row>\n              </ListGroup.Item>\n\n              <ListGroup.Item>\n                <Row>\n                  <Col>Shipping</Col>\n                  <Col>₦{cart.shippingPrice}</Col>\n                </Row>\n              </ListGroup.Item>\n\n              <ListGroup.Item>\n                <Row>\n                  <Col>Tax</Col>\n                  <Col>₦{cart.taxPrice}</Col>\n                </Row>\n              </ListGroup.Item>\n\n              <ListGroup.Item>\n                <Row>\n                  <Col>Total</Col>\n                  <Col>₦{cart.totalPrice}</Col>\n                </Row>\n              </ListGroup.Item>\n\n              <ListGroup.Item>\n                {error && <Message variant=\"danger\">{error}</Message>}\n              </ListGroup.Item>\n\n              <ListGroup.Item>\n                <Button\n                  type=\"button\"\n                  disabled={cart.cartItems === 0}\n                  onClick={placeOrderHandler}\n                >\n                  Place Order\n                </Button>\n              </ListGroup.Item>\n            </ListGroup>\n          </Card>\n        </Col>\n      </Row>\n    </>\n  );\n};\n\nexport default PlaceorderScreen;\n","/home/damilare/Desktop/works/new-shop/frontend/src/reducers/orderReducers.js",["177"],"import {\n  ORDER_CREATE_FAIL,\n  ORDER_CREATE_REQUEST,\n  ORDER_CREATE_SUCCESS,\n  ORDER_DELIVER_FAIL,\n  ORDER_DELIVER_REQUEST,\n  ORDER_DELIVER_RESET,\n  ORDER_DELIVER_SUCCESS,\n  ORDER_DETAILS_FAIL,\n  ORDER_DETAILS_REQUEST,\n  ORDER_DETAILS_SUCCESS,\n  ORDER_LIST_FAIL,\n  ORDER_LIST_MY_FAIL,\n  ORDER_LIST_MY_REQUEST,\n  ORDER_LIST_MY_RESET,\n  ORDER_LIST_MY_SUCCESS,\n  ORDER_LIST_REQUEST,\n  ORDER_LIST_RESET,\n  ORDER_LIST_SUCCESS,\n  ORDER_PAY_FAIL,\n  ORDER_PAY_REQUEST,\n  ORDER_PAY_RESET,\n  ORDER_PAY_SUCCESS,\n} from \"../constants/orderConstants\";\n\nexport const orderCreateReducer = (state = {}, action) => {\n  switch (action.type) {\n    case ORDER_CREATE_REQUEST:\n      return { loading: true };\n    case ORDER_CREATE_SUCCESS:\n      return { loading: false, success: true, order: action.payload };\n    case ORDER_CREATE_FAIL:\n      return { loading: false, error: action.payload };\n\n    default:\n      return state;\n  }\n};\n\nexport const orderDetailsReducer = (\n  state = { loading: true, order: [], shippingAddress: {} },\n  action\n) => {\n  switch (action.type) {\n    case ORDER_DETAILS_REQUEST:\n      return { loading: true, ...state };\n    case ORDER_DETAILS_SUCCESS:\n      return { loading: false, order: action.payload };\n    case ORDER_DETAILS_FAIL:\n      return { loading: false, error: action.payload };\n\n    default:\n      return state;\n  }\n};\n\nexport const orderPayReducer = (state = {}, action) => {\n  switch (action.type) {\n    case ORDER_PAY_REQUEST:\n      return { loading: true };\n    case ORDER_PAY_SUCCESS:\n      return { loading: false, success: true };\n    case ORDER_PAY_FAIL:\n      return { loading: false, error: action.payload };\n\n    case ORDER_PAY_RESET:\n      return {};\n\n    default:\n      return state;\n  }\n};\n\nexport const orderListMyReducer = (state = { orders: [] }, action) => {\n  switch (action.type) {\n    case ORDER_LIST_MY_REQUEST:\n      return { loading: true };\n    case ORDER_LIST_MY_SUCCESS:\n      return { loading: false, orders: action.payload };\n    case ORDER_LIST_MY_FAIL:\n      return { loading: false, error: action.payload };\n    case ORDER_LIST_MY_RESET:\n      return { orders: [] };\n\n    default:\n      return state;\n  }\n};\n\nexport const orderListReducer = (state = { orders: [] }, action) => {\n  switch (action.type) {\n    case ORDER_LIST_REQUEST:\n      return { loading: true };\n    case ORDER_LIST_SUCCESS:\n      return { loading: false, orders: action.payload };\n    case ORDER_LIST_FAIL:\n      return { loading: false, error: action.payload };\n\n    default:\n      return state;\n  }\n};\n\nexport const orderDeliverReducer = (state = {}, action) => {\n  switch (action.type) {\n    case ORDER_DELIVER_REQUEST:\n      return { loading: true };\n    case ORDER_DELIVER_SUCCESS:\n      return { loading: false, success: true };\n    case ORDER_DELIVER_FAIL:\n      return { loading: false, error: action.payload };\n    case ORDER_DELIVER_RESET:\n      return {};\n\n    default:\n      return state;\n  }\n};\n","/home/damilare/Desktop/works/new-shop/frontend/src/constants/orderConstants.js",[],"/home/damilare/Desktop/works/new-shop/frontend/src/actions/orderActions.js",[],"/home/damilare/Desktop/works/new-shop/frontend/src/screens/OrderScreen.js",["178","179","180","181"],"import React, { useEffect } from \"react\";\nimport { ListGroup, Image, Card, Row, Col, Button } from \"react-bootstrap\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport Message from \"../components/Message\";\nimport Loader from \"../components/Loader.js\";\nimport { Link } from \"react-router-dom\";\nimport { getOrderDetails, deliverOrder } from \"../actions/orderActions.js\";\nimport Flutterwave from \"../components/Flutterwave\";\nimport { ORDER_DELIVER_RESET } from \"../constants/orderConstants\";\n\nconst OrderScreen = ({ match, history }) => {\n  const orderId = match.params.id;\n  const dispatch = useDispatch();\n\n  // get the order details from state\n  const { order, loading, error } = useSelector((state) => state.orderDetails);\n\n  // get the order details from state\n  const {\n    success: successPay,\n    loading: loadingPay,\n    error: errorPay,\n  } = useSelector((state) => state.orderPay);\n\n  // get the order deliver from state\n  const {\n    success: successDeliver,\n    loading: loadingDeliver,\n    error: errorDeliver,\n  } = useSelector((state) => state.orderDeliver);\n\n  //get user from state\n  const { userInfo } = useSelector((state) => state.userLogin);\n\n  // on-load of the screen fetch the order\n  useEffect(() => {\n    if(!userInfo){\n      history.push('/login')\n    }\n    dispatch(getOrderDetails(orderId));\n  }, [orderId, dispatch, successDeliver]);\n\n  // Calculate Prices\n  if (!loading) {\n    const addDecimals = (num) => {\n      return (Math.round(num * 100) / 100).toFixed(2);\n    };\n\n    order.itemsPrice = addDecimals(\n      order.orderItems.reduce((acc, item) => acc + item.price * item.qty, 0)\n    );\n  }\n\n  const deliverHandler = () => {\n    dispatch(deliverOrder(orderId));\n  };\n\n  return loading ? (\n    <Loader />\n  ) : error ? (\n    <Message variant=\"danger\">{error}</Message>\n  ) : (\n    <>\n      <h1>Order {order._id}</h1>\n\n      <Row>\n        <Col md={8}>\n          <ListGroup variant=\"flush\">\n            {/* display the shipping address */}\n            <ListGroup.Item>\n              <h2>Shipping</h2>\n              <p>\n                {\" \"}\n                <strong>Name: </strong>\n                {order.user.name}\n              </p>\n              <p>\n                <strong>Email: </strong>\n                <a href={`mailto: ${order.user.email}`}> {order.user.email}</a>\n              </p>\n              <p>\n                <strong>Address: </strong>\n                {order.shippingAddress.address}, {order.shippingAddress.city},{\" \"}\n                {order.shippingAddress.postalCode},{\" \"}\n                {order.shippingAddress.country},\n              </p>\n\n              {order.isDelivered ? (\n                <Message variant=\"success\">Paid on {order.deliveredAt}</Message>\n              ) : (\n                <Message variant=\"danger\">Not Delivered</Message>\n              )}\n            </ListGroup.Item>\n\n            {/* display the payment method */}\n            <ListGroup.Item>\n              <h2>Payment Method </h2>\n              <p>\n                <strong>Method: </strong>\n                {order.paymentMethod}\n              </p>\n              {order.isPaid ? (\n                <Message variant=\"success\">Paid on {order.paidAt}</Message>\n              ) : (\n                <Message variant=\"danger\">Not Paid</Message>\n              )}\n            </ListGroup.Item>\n\n            {/* display orders */}\n            <ListGroup.Item>\n              <h2>Order Items</h2>\n              {order.orderItems.length === 0 ? (\n                <Message>Order is empty</Message>\n              ) : (\n                <ListGroup variant=\"flush\">\n                  {order.orderItems.map((item, index) => (\n                    <ListGroup.Item key={index}>\n                      <Row>\n                        <Col md={1}>\n                          <Image\n                            src={item.image}\n                            alt={item.name}\n                            fluid\n                            rounded\n                          />\n                        </Col>\n                        <Col>\n                          <Link to={`/product/item.product`}>{item.name}</Link>\n                        </Col>\n                        <Col md={4}>\n                          {item.qty} x ₦{item.price} = ₦{item.qty * item.price}\n                        </Col>\n                      </Row>\n                    </ListGroup.Item>\n                  ))}\n                </ListGroup>\n              )}\n            </ListGroup.Item>\n          </ListGroup>\n        </Col>\n\n        <Col md={4}>\n          <Card>\n            <ListGroup>\n              <ListGroup.Item>\n                <h2>Order Summary</h2>\n              </ListGroup.Item>\n\n              <ListGroup.Item>\n                <Row>\n                  <Col>Items</Col>\n                  <Col>₦{order.itemsPrice}</Col>\n                </Row>\n              </ListGroup.Item>\n\n              <ListGroup.Item>\n                <Row>\n                  <Col>Shipping</Col>\n                  <Col>₦{order.shippingPrice}</Col>\n                </Row>\n              </ListGroup.Item>\n\n              <ListGroup.Item>\n                <Row>\n                  <Col>Tax</Col>\n                  <Col>₦{order.taxPrice}</Col>\n                </Row>\n              </ListGroup.Item>\n\n              <ListGroup.Item>\n                <Row>\n                  <Col>Total</Col>\n                  <Col>₦{order.totalPrice}</Col>\n                </Row>\n              </ListGroup.Item>\n\n              {!order.isPaid && (\n                <ListGroup.Item>\n                  {loadingPay ? (\n                    <Loader />\n                  ) : (\n                    <Flutterwave\n                      successPay={successPay}\n                      userName={order.user.name}\n                      userEmail={order.user.email}\n                      amount={order.totalPrice}\n                      orderId={orderId}\n                    />\n                  )}\n                </ListGroup.Item>\n              )}\n              {loadingDeliver && <Loader />}\n              {userInfo && userInfo.isAdmin && order.isPaid && !order.isDelivered && (\n                <ListGroup.Item>\n                  <Button\n                    className=\"btn btn-block\"\n                    type=\"button\"\n                    onClick={deliverHandler}\n                  >Mark As Delivered</Button>\n                </ListGroup.Item>\n              )}\n            </ListGroup>\n          </Card>\n        </Col>\n      </Row>\n    </>\n  );\n};\n\nexport default OrderScreen;\n","/home/damilare/Desktop/works/new-shop/frontend/src/components/Flutterwave.js",["182"],"import React, { useEffect, useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { useFlutterwave, closePaymentModal } from \"flutterwave-react-v3\";\nimport axios from \"axios\";\nimport { getOrderDetails, payOrder } from \"../actions/orderActions\";\nimport { ORDER_PAY_RESET } from \"../constants/orderConstants\";\n\nexport default function App({ orderId, userName, userEmail, amount }) {\n  const [flutterId, setFlutterId] = useState(\"\");\n\n  const dispatch = useDispatch();\n  useEffect(() => {\n    const getPublicId = async () => {\n      const { data: publicId } = await axios.get(\"/api/config/flutterwave\");\n\n      setFlutterId(publicId);\n    };\n\n    getPublicId();\n  }, []);\n\n\n  const config = {\n    public_key: flutterId,\n    tx_ref: Date.now(),\n    amount,\n    currency: \"NGN\",\n    payment_options: \"card,mobilemoney,ussd\",\n    customer: {\n      email: userEmail,\n      phonenumber: \"\",\n      name: userName,\n    },\n    customizations: {\n      title: \"New Shop\",\n      description: \"Payment for items in cart\",\n      logo:\n        \"https://st2.depositphotos.com/4403291/7418/v/450/depositphotos_74189661-stock-illustration-online-shop-log.jpg\",\n    },\n  };\n\n  const handleFlutterPayment = useFlutterwave(config);\n\n  return (\n    <div className=\"App\">\n      <button\n        style={{\n          padding: \"0.5em 3em\",\n          border: \"0.16em solid #FFFFFF\",\n          margin: \"0 0.3em 0.3em 0\",\n          backgroundColor: \"#000\",\n          boxSizing: \"border-box\",\n          textTransform: \"uppercase\",\n          fontWeight: 400,\n          color: \"#FFFFFF\",\n          textAlign: \"center\",\n          transition: \"all 0.15s\",\n        }}\n        onClick={() => {\n          handleFlutterPayment({\n            callback: (response) => {\n              //dispatch the payment result\n              dispatch(payOrder(orderId, response));\n             \n              //dispatch refresh payOrder\n              dispatch({ type: ORDER_PAY_RESET });\n\n              closePaymentModal(); // this will close the modal programmatically\n               if (response.status === \"successful\") {\n                 window.location.reload();\n               }\n            },\n            onClose: () => {},\n          });\n        }}\n      >\n        Payment with Card\n      </button>\n    </div>\n  );\n}\n","/home/damilare/Desktop/works/new-shop/frontend/src/screens/UserListScreen.js",["183","184"],"import React, { useState, useEffect } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { LinkContainer } from \"react-router-bootstrap\";\nimport { Table, Button } from \"react-bootstrap\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport Message from \"../components/Message\";\nimport { deleteUser, listUsers } from \"../actions/userActions\";\nimport Loader from \"../components/Loader.js\";\n\nconst UserListScreen = ({ history }) => {\n  const dispatch = useDispatch();\n\n  //Bring the user list into the component\n  const { loading, error, users } = useSelector((state) => state.userList);\n\n  // Bring the userLogged in into the component\n  const { userInfo } = useSelector((state) => state.userLogin);\n\n  // Bring the userLogged in into the component\n  const { success: successDelete } = useSelector((state) => state.userDelete);\n\n  // onload of the screen, dispatch the listUser Action\n  useEffect(() => {\n    if (userInfo && userInfo.isAdmin) {\n      dispatch(listUsers());\n    } else {\n      history.push(\"/login\");\n    }\n  }, [dispatch, history, successDelete, userInfo]);\n\n  //Handler to delete a user\n  const deleteHandler = (userId) => {\n    if (window.confirm(\"Are you sure?\")) {\n      dispatch(deleteUser(userId));\n    }\n  };\n\n  return (\n    <>\n      <h1>Users</h1>\n      {loading ? (\n        <Loader />\n      ) : error ? (\n        <Message variant=\"danger\">{error}</Message>\n      ) : (\n        <Table striped bordered hover responsive className=\"table-sm\">\n          <thead>\n            <tr>\n              <th>ID</th>\n              <th>NAME</th>\n              <th>EMAIL</th>\n              <th>ADMIN</th>\n              <th></th>\n            </tr>\n          </thead>\n\n          <tbody>\n            {users.map((user) => (\n              <tr key={user._id}>\n                <td>{user._id}</td>\n                <td>{user.name}</td>\n                <td>\n                  <a href={`mailto: ${user.email}`}>{user.email}</a>\n                </td>\n                <td>\n                  {user.isAdmin ? (\n                    <i className=\"fas fa-check\" style={{ color: \"green\" }} />\n                  ) : (\n                    <i className=\"fas fa-times\" style={{ color: \"red\" }} />\n                  )}\n                </td>\n                <td>\n                  <LinkContainer to={`/admin/user/${user._id}/edit`}>\n                    <Button variant=\"light\" className=\"btn-sm\">\n                      <i className=\"fas fa-edit\" />\n                    </Button>\n                  </LinkContainer>\n                  <Button\n                    variant=\"danger\"\n                    className=\"btn-sm\"\n                    onClick={() => deleteHandler(user._id)}\n                  >\n                    <i className=\"fas fa-trash\" />\n                  </Button>\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </Table>\n      )}\n    </>\n  );\n};\n\nexport default UserListScreen;\n","/home/damilare/Desktop/works/new-shop/frontend/src/screens/UserEditScreen.js",[],"/home/damilare/Desktop/works/new-shop/frontend/src/screens/ProductListScreen.js",["185","186","187"],"import React, { useState, useEffect } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { LinkContainer } from \"react-router-bootstrap\";\nimport { Table, Button, Row, Col } from \"react-bootstrap\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport Message from \"../components/Message\";\nimport {\n  listProducts,\n  deleteProduct,\n  createProduct,\n} from \"../actions/productActions\";\nimport Loader from \"../components/Loader.js\";\nimport { PRODUCT_CREATE_RESET } from \"../constants/productConstants\";\n\nconst ProductListScreen = ({ history, match }) => {\n  const dispatch = useDispatch();\n\n  //Bring the products list into the component\n  const { loading, error, products } = useSelector(\n    (state) => state.productList\n  );\n\n  // Bring the userLogged in into the component\n  const { userInfo } = useSelector((state) => state.userLogin);\n\n  // Bring the userLogged in into the component\n  const {\n    success: successCreate,\n    error: errorCreate,\n    loading: loadingCreate,\n    product: createdProduct,\n  } = useSelector((state) => state.productCreate);\n\n  // Bring the userLogged in into the component\n  const {\n    success: successDelete,\n    loading: loadingDelete,\n    error: errorDelete,\n  } = useSelector((state) => state.productDelete);\n\n  // onload of the screen, dispatch the listProduct Action\n  useEffect(() => {\n    dispatch({ type: PRODUCT_CREATE_RESET });\n\n    if (!userInfo.isAdmin) {\n      history.push(\"/login\");\n    }\n\n    if (successCreate) {\n      history.push(`/admin/product/${createdProduct._id}/edit`);\n    } else {\n      dispatch(listProducts());\n    }\n  }, [\n    dispatch,\n    history,\n    userInfo,\n    successDelete,\n    successCreate,\n    createProduct,\n  ]);\n\n  //Handler to delete a product\n  const deleteHandler = (productId) => {\n    if (window.confirm(\"Are you sure?\")) {\n      // DELETE PRODUCT\n      dispatch(deleteProduct(productId));\n    }\n  };\n\n  // Handler to create new product\n  const createProductHandler = () => {\n    // CREATE PRODUCT\n    dispatch(createProduct());\n  };\n\n  return (\n    <>\n      <Row className=\"align-items-center\">\n        <Col>\n          <h1>Products</h1>\n        </Col>\n        <Col className=\"text-right\">\n          <Button className=\"my-3\" onClick={createProductHandler}>\n            <i className=\"fas fa-plus\"></i> Create Product\n          </Button>\n        </Col>\n      </Row>\n      {loadingDelete && <Loader />}\n      {errorDelete && <Message variant=\"danger\">{errorDelete}</Message>}\n\n      {loadingCreate && <Loader />}\n      {errorCreate  && <Message variant=\"danger\">{errorCreate}</Message>}\n\n      {loading ? (\n        <Loader />\n      ) : error ? (\n        <Message variant=\"danger\">{error}</Message>\n      ) : (\n        <Table striped bordered hover responsive className=\"table-sm\">\n          <thead>\n            <tr>\n              <th>ID</th>\n              <th>NAME</th>\n              <th>PRICE</th>\n              <th>CATEGORY</th>\n              <th>BRAND</th>\n              <th></th>\n            </tr>\n          </thead>\n\n          <tbody>\n            {products.map((product) => (\n              <tr key={product._id}>\n                <td>{product._id}</td>\n                <td>{product.name}</td>\n                <td>₦{product.price}</td>\n                <td>{product.category}</td>\n                <td>{product.brand}</td>\n                <td>\n                  <LinkContainer to={`/admin/product/${product._id}/edit`}>\n                    <Button variant=\"light\" className=\"btn-sm\">\n                      <i className=\"fas fa-edit\" />\n                    </Button>\n                  </LinkContainer>\n                  <Button\n                    variant=\"danger\"\n                    className=\"btn-sm\"\n                    onClick={() => deleteHandler(product._id)}\n                  >\n                    <i className=\"fas fa-trash\" />\n                  </Button>\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </Table>\n      )}\n    </>\n  );\n};\n\nexport default ProductListScreen;\n","/home/damilare/Desktop/works/new-shop/frontend/src/screens/ProductEditScreen.js",["188"],"import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { Link } from \"react-router-dom\";\nimport { Form, Button } from \"react-bootstrap\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport Message from \"../components/Message\";\nimport { listProductDetails, updateProduct } from \"../actions/productActions\";\nimport Loader from \"../components/Loader.js\";\nimport FormContainer from \"../components/FormContainer\";\nimport { PRODUCT_UPDATE_RESET } from \"../constants/productConstants\";\n\nconst ProductEditScreen = ({ match, history }) => {\n  const productId = match.params.id;\n\n  const [name, setName] = useState(\"\");\n  const [price, setPrice] = useState(0);\n  const [image, setImage] = useState(\"\");\n  const [brand, setBrand] = useState(\"\");\n  const [category, setCategory] = useState(\"\");\n  const [countInStock, setCountInStock] = useState(\"\");\n  const [description, setDescription] = useState(\"\");\n  const [uploading, setUploading] = useState(false);\n\n  const dispatch = useDispatch();\n  // get user details state\n  const { loading, error, product } = useSelector(\n    (state) => state.productDetails\n  );\n\n  // get product update state\n  const {\n    loading: loadingUpdate,\n    error: errorUpdate,\n    success: successUpdate,\n    product: productUpdate,\n  } = useSelector((state) => state.productUpdate);\n\n  useEffect(() => {\n    if (successUpdate) {\n      dispatch({ type: PRODUCT_UPDATE_RESET });\n\n      history.push(`/admin/productlist`);\n    } else {\n      if (!product.name || product._id !== productId) {\n        dispatch(listProductDetails(productId));\n      } else {\n        setName(product.name);\n        setPrice(product.price);\n        setImage(product.image);\n        setBrand(product.brand);\n        setCategory(product.category);\n        setCountInStock(product.countInStock);\n        setDescription(product.description);\n      }\n    }\n  }, [dispatch, productId, product, history, successUpdate]);\n\n  const onSubmitHandler = (e) => {\n    e.preventDefault();\n\n    // UPDATE PRODUCT DISPATCH\n    dispatch(\n      updateProduct({\n        _id: productId,\n        name,\n        description,\n        image,\n        countInStock,\n        category,\n        brand,\n        price,\n      })\n    );\n  };\n\n  const uploadFileHandler = async(e) =>{\n    const file = e.target.files[0]\n    const formData = new FormData()\n\n    formData.append('image', file)\n\n    setUploading(true)\n\n    try {\n      const config = {\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        }\n      }\n\n      const {data} = await axios.post('/api/upload', formData, config)\n\n      setImage(data)\n\n      setUploading(false)\n    } catch (error) {\n      console.error(error);\n      setUploading(false)\n    }\n  }\n\n  return (\n    <>\n      <Link to=\"/admin/productlist\" className=\"btn btn-light my-3\">\n        Go Back\n      </Link>\n\n      <FormContainer>\n        <h1>Edit Product</h1>\n        {loadingUpdate && <Loader />}\n\n        {errorUpdate && <Message variant=\"danger\">{errorUpdate}</Message>}\n\n        {loading ? (\n          <Loader />\n        ) : error ? (\n          <Message variant=\"danger\">{error}</Message>\n        ) : (\n          <Form onSubmit={onSubmitHandler}>\n            <Form.Group controlId=\"name\">\n              <Form.Label>Name</Form.Label>\n              <Form.Control\n                type=\"text\"\n                placeholder=\"Enter Name\"\n                value={name}\n                onChange={(e) => setName(e.target.value)}\n              ></Form.Control>\n            </Form.Group>\n\n            <Form.Group controlId=\"price\">\n              <Form.Label>Price</Form.Label>\n              <Form.Control\n                type=\"number\"\n                placeholder=\"Enter Price\"\n                value={price}\n                onChange={(e) => setPrice(e.target.value)}\n              ></Form.Control>\n            </Form.Group>\n\n            <Form.Group controlId=\"image\">\n              <Form.Label>Image</Form.Label>\n              <Form.Control\n                type=\"text\"\n                placeholder=\"Enter Image Url\"\n                value={image}\n                onChange={(e) => setImage(e.target.value)}\n              ></Form.Control>\n              <Form.File\n                id=\"image-file\"\n                label=\"Choose File\"\n                custom\n                onChange={uploadFileHandler}\n              ></Form.File>\n              {uploading && <Loader />}\n            </Form.Group>\n\n            <Form.Group controlId=\"description\">\n              <Form.Label>Description</Form.Label>\n              <Form.Control\n                type=\"text\"\n                placeholder=\"Enter Description\"\n                value={description}\n                onChange={(e) => setDescription(e.target.value)}\n              ></Form.Control>\n            </Form.Group>\n\n            <Form.Group controlId=\"brand\">\n              <Form.Label>Brand</Form.Label>\n              <Form.Control\n                type=\"text\"\n                placeholder=\"Enter brand\"\n                value={brand}\n                onChange={(e) => setBrand(e.target.value)}\n              ></Form.Control>\n            </Form.Group>\n\n            <Form.Group controlId=\"countInStock\">\n              <Form.Label>Count In Stock</Form.Label>\n              <Form.Control\n                type=\"number\"\n                placeholder=\"Enter count In stock\"\n                value={countInStock}\n                onChange={(e) => setCountInStock(e.target.value)}\n              ></Form.Control>\n            </Form.Group>\n\n            <Form.Group controlId=\"category\">\n              <Form.Label>Category</Form.Label>\n              <Form.Control\n                type=\"text\"\n                placeholder=\"Enter Category\"\n                value={category}\n                onChange={(e) => setCategory(e.target.value)}\n              ></Form.Control>\n            </Form.Group>\n\n            <Button type=\"submit\" variant=\"primary\">\n              Update\n            </Button>\n          </Form>\n        )}\n      </FormContainer>\n    </>\n  );\n};\n\nexport default ProductEditScreen;\n","/home/damilare/Desktop/works/new-shop/frontend/src/screens/OrderListScreen.js",["189","190"],"import React, { useState, useEffect } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { LinkContainer } from \"react-router-bootstrap\";\nimport { Table, Button } from \"react-bootstrap\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport Message from \"../components/Message\";\nimport { listOrders } from \"../actions/orderActions\";\nimport Loader from \"../components/Loader.js\";\n\nconst OrderListScreen = ({ history }) => {\n  const dispatch = useDispatch();\n\n  //Bring the user list into the component\n  const { loading, error, orders } = useSelector((state) => state.orderList);\n\n  // Bring the userLogged in into the component\n  const { userInfo } = useSelector((state) => state.userLogin);\n\n\n  // onload of the screen, dispatch the listUser Action\n  useEffect(() => {\n    if (userInfo && userInfo.isAdmin) {\n      dispatch(listOrders());\n    } else {\n      history.push(\"/login\");\n    }\n  }, [dispatch, history, userInfo]);\n\n \n\n  return (\n    <>\n      <h1>Orders</h1>\n      {loading ? (\n        <Loader />\n      ) : error ? (\n        <Message variant=\"danger\">{error}</Message>\n      ) : (\n        <Table striped bordered hover responsive className=\"table-sm\">\n          <thead>\n            <tr>\n              <th>ID</th>\n              <th>USER</th>\n              <th>DATE</th>\n              <th>TOTAL</th>\n              <th>PAID</th>\n              <th>DELIVERED</th>\n              <th></th>\n            </tr>\n          </thead>\n\n          <tbody>\n            {orders.map((order) => (\n              <tr key={order._id}>\n                <td>{order._id}</td>\n                <td>{order.user && order.user.name}</td>\n                <td>\n                  {order.createdAt.substring(0, 10)}\n                </td>\n                <td>\n                  ₦{order.totalPrice}\n                </td>\n                <td>\n                  {order.isPaid ? (\n                      order.paidAt.substring(0, 10)\n                  ) : (\n                      <i className='fas fa-times' style={{color: 'red'}} />\n                  )}\n                </td>\n\n                 <td>\n                  {order.isDelivered ? (\n                      order.deliveredAt.substring(0, 10)\n                  ) : (\n                      <i className='fas fa-times' style={{color: 'red'}} />\n                  )}\n                </td>\n                <td>\n                  <LinkContainer to={`/order/${order._id}`}>\n                    <Button variant=\"light\" className=\"btn-sm\">\n                      Details\n                    </Button>\n                  </LinkContainer>\n                  \n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </Table>\n      )}\n    </>\n  );\n};\n\nexport default OrderListScreen;\n","/home/damilare/Desktop/works/new-shop/frontend/src/screens/SearchBox.js",[],{"ruleId":"191","replacedBy":"192"},{"ruleId":"193","replacedBy":"194"},{"ruleId":"195","severity":1,"message":"196","line":33,"column":14,"nodeType":"197","messageId":"198","endLine":33,"endColumn":34},{"ruleId":"195","severity":1,"message":"199","line":28,"column":50,"nodeType":"197","messageId":"198","endLine":28,"endColumn":61},{"ruleId":"200","severity":1,"message":"201","line":59,"column":6,"nodeType":"202","endLine":59,"endColumn":24,"suggestions":"203"},{"ruleId":"195","severity":1,"message":"204","line":18,"column":3,"nodeType":"197","messageId":"198","endLine":18,"endColumn":19},{"ruleId":"195","severity":1,"message":"205","line":9,"column":10,"nodeType":"197","messageId":"198","endLine":9,"endColumn":29},{"ruleId":"195","severity":1,"message":"206","line":22,"column":12,"nodeType":"197","messageId":"198","endLine":22,"endColumn":20},{"ruleId":"195","severity":1,"message":"207","line":29,"column":12,"nodeType":"197","messageId":"198","endLine":29,"endColumn":24},{"ruleId":"200","severity":1,"message":"208","line":41,"column":6,"nodeType":"202","endLine":41,"endColumn":41,"suggestions":"209"},{"ruleId":"195","severity":1,"message":"210","line":5,"column":10,"nodeType":"197","messageId":"198","endLine":5,"endColumn":25},{"ruleId":"195","severity":1,"message":"211","line":1,"column":17,"nodeType":"197","messageId":"198","endLine":1,"endColumn":25},{"ruleId":"195","severity":1,"message":"212","line":2,"column":10,"nodeType":"197","messageId":"198","endLine":2,"endColumn":14},{"ruleId":"195","severity":1,"message":"211","line":1,"column":17,"nodeType":"197","messageId":"198","endLine":1,"endColumn":25},{"ruleId":"195","severity":1,"message":"212","line":2,"column":10,"nodeType":"197","messageId":"198","endLine":2,"endColumn":14},{"ruleId":"200","severity":1,"message":"213","line":54,"column":6,"nodeType":"202","endLine":61,"endColumn":4,"suggestions":"214"},{"ruleId":"195","severity":1,"message":"215","line":35,"column":14,"nodeType":"197","messageId":"198","endLine":35,"endColumn":27},{"ruleId":"195","severity":1,"message":"211","line":1,"column":17,"nodeType":"197","messageId":"198","endLine":1,"endColumn":25},{"ruleId":"195","severity":1,"message":"212","line":2,"column":10,"nodeType":"197","messageId":"198","endLine":2,"endColumn":14},"no-native-reassign",["216"],"no-negated-in-lhs",["217"],"no-unused-vars","'loadingProductReview' is assigned a value but never used.","Identifier","unusedVar","'errorOrders' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'order._id'. Either include it or remove the dependency array.","ArrayExpression",["218"],"'ORDER_LIST_RESET' is defined but never used.","'ORDER_DELIVER_RESET' is defined but never used.","'errorPay' is assigned a value but never used.","'errorDeliver' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'history' and 'userInfo'. Either include them or remove the dependency array.",["219"],"'getOrderDetails' is defined but never used.","'useState' is defined but never used.","'Link' is defined but never used.","React Hook useEffect has a missing dependency: 'createdProduct._id'. Either include it or remove the dependency array. Outer scope values like 'createProduct' aren't valid dependencies because mutating them doesn't re-render the component.",["220"],"'productUpdate' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"221","fix":"222"},{"desc":"223","fix":"224"},{"desc":"225","fix":"226"},"Update the dependencies array to be: [history, order._id, success]",{"range":"227","text":"228"},"Update the dependencies array to be: [orderId, dispatch, successDeliver, userInfo, history]",{"range":"229","text":"230"},"Update the dependencies array to be: [dispatch, history, userInfo, successDelete, successCreate, createdProduct._id]",{"range":"231","text":"232"},[1749,1767],"[history, order._id, success]",[1337,1372],"[orderId, dispatch, successDeliver, userInfo, history]",[1606,1709],"[dispatch, history, userInfo, successDelete, successCreate, createdProduct._id]"]